name: CI
on:
  pull_request:
    branches: [main]
    paths-ignore:
      - "**/*.md"
  push:
    branches: [main]
    tags: ["v*.*.*"] # Ex. v0.1.0, v0.1.1-rc2

permissions:
  contents: read

env:
  GO_VERSION: "1.24"

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.actor }}
  cancel-in-progress: true

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          cache: false
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin
          key: test-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest

  validate_module:
    name: Validate Go Module
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Verify go mod tidy
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain)" ]; then
            echo "go mod tidy resulted in changes:"
            git diff
            exit 1
          fi

      - name: Verify module can be imported
        run: |
          mkdir -p ${{ runner.temp }}/test-import
          cd ${{ runner.temp }}/test-import
          go mod init test
          go get github.com/mgpai22/ergo-connector-go@${{ github.sha }}

  # Only create a release tag, no binaries since this is a library
  release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: [test, validate_module]
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Release
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: context.ref.replace('refs/tags/', ''),
                name: context.ref.replace('refs/tags/', ''),
                draft: false,
                prerelease: false,
                generate_release_notes: true,
              });
              core.info(`Created release: ${response.data.html_url}`);
            } catch (error) {
              core.setFailed(error.message);
            }
